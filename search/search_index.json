{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quick start","text":"<p>The Tensor.trade Python SDK is a Python-based toolkit designed for developers who need to interface with the Tensor.trade API. This SDK simplifies the process of accessing trading and financial data through GraphQL queries. It is tailored for those who require reliable and straightforward tools to retrieve market data, manage trading operations, or interact with the rich datasets provided by Tensor.trade.</p> <p>The SDK leverages ariadne-codegen to generate the clients used within the SDK. This approach ensures that the SDK remains up-to-date with the latest GraphQL schema changes and provides a robust foundation for interacting with the Tensor.trade API.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install tensortradesdk\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#collection-data","title":"Collection Data","text":"<p>Get data based on GraphQL queries that can be found in Tensor.trade API docs and are also available in Tensor.trade Apollo Studio Explorer.</p>"},{"location":"#mint","title":"Mint","text":"<pre><code>import os\n\nfrom tensortradesdk.clients.collection_data_client import CollectionDataClient\n\ncollection_data_client = CollectionDataClient(api_key=os.environ[\"TENSOR_API_KEY\"])\nmint = collection_data_client.mint(mint=\"5gzsZDwaVERyKEpujPYfHkpvc7jMGvixZC5aJqAnEGEP\")\nprint(mint)\n# will print out (formatted for better legibility)\n# mint=MintMint(\n#   slug='05c52d84-2e49-4ed9-a473-b43cab41e777', \n#   tswap_orders=[], \n#   tensor_bids=[\n#     MintMintTensorBids(\n#       bidder='yfUkk7NmNmimdSdLA4gjnnKd2bYuSbDRYQFLww9bPeq', \n#       expiry=1733821085000, \n#       price='51240000000'\n#     )\n#   ], \n#   hswap_orders=[], \n#   active_listings=[\n#     MintMintActiveListings(\n#       mint=MintMintActiveListingsMint(onchain_id='5gzsZDwaVERyKEpujPYfHkpvc7jMGvixZC5aJqAnEGEP'), \n#       tx=MintMintActiveListingsTx(\n#         seller_id='9bnVcN1ASN7Y4RLaE6XFmf4kiCYBA5vGMn37fEpVsCmV', \n#         gross_amount='111990000000', \n#         gross_amount_unit='SOL_LAMPORT'\n#       )\n#     )\n#   ]\n# )\n</code></pre>"},{"location":"#transactions","title":"Transactions","text":""},{"location":"#tcomp-listing","title":"TComp listing","text":"<pre><code>import os\n\nfrom tensortradesdk.clients.transactions_client import TransactionsClient\nfrom tensortradesdk.solana import SolanaClient\n\ntransactions_client = TransactionsClient(api_key=os.environ[\"TENSOR_API_KEY\"])\ntx_buffer = transactions_client.tcomp_list_tx(\n    mint=\"5gzsZDwaVERyKEpujPYfHkpvc7jMGvixZC5aJqAnEGEP\",\n    owner=\"GkDpghsgrsJPcajN7pP9jAtDyfEoK2jxw9CLhZro6i59\",\n    price=\"420000000000\",\n)\nprint(tx_buffer)\n# will print out (formatted for better legibility)\n# tcomp_list_tx=TcompListTxTcompListTx(\n#   txs=[\n#     TcompListTxTcompListTxTxs(\n#       last_valid_block_height=218440754, \n#       tx={\n#         'type': 'Buffer', \n#         'data': [1, 0, 0, 0, 0, ...]\n#       }\n#     )\n#   ]\n# )\n\nsolana_client = SolanaClient(\n    network=\"mainnet\",\n    private_key=\"&lt;private_key&gt;\",\n)\nsolana_client.submit_tensor_transaction(tx_buffer)\n</code></pre>"},{"location":"#graphql-subscriptions","title":"GraphQL subscriptions","text":"<pre><code>import os\n\nimport asyncio\n\nfrom tensortradesdk.clients.subscriptions_client_async import SubscriptionsClientAsync\n\nsubscriptions_client = SubscriptionsClientAsync(api_key=os.environ[\"TENSOR_API_KEY\"])\n\n\nasync def print_orders():\n    async for update in subscriptions_client.tswap_order_update_all():\n        print(update)\n\n\nasyncio.run(print_orders())\n# this will stream order updates to console until the process is interrupted (e.g. Ctrl+C)\n# tswap_order_update_all=TswapOrderUpdateAllTswapOrderUpdateAll(address='2aGMBEtKpyJeWTiCCSuE5Ktpbx9Q93932eUiaBXbY8H3', pool=TswapOrderUpdateAllTswapOrderUpdateAllPool(address='2aGMBEtKpyJeWTiCCSuE5Ktpbx9Q93932eUiaBXbY8H3', created_unix=1703151492000, curve_type=&lt;CurveType.LINEAR: 'LINEAR'&gt;, delta='10', mm_compound_fees=False, mm_fee_bps=None, nfts_for_sale=[], nfts_held=0, owner_address='K5iuD4h1zv46bsw5KNBMDkYKnnZCGoLq151wdJ7uv9d', pool_type=&lt;PoolType.TOKEN: 'TOKEN'&gt;, sol_balance='238981700', starting_price='9508900000', buy_now_price=None, sell_now_price=None, stats_accumulated_mm_profit='0', stats_taker_buy_count=0, stats_taker_sell_count=0, taker_buy_count=0, taker_sell_count=0, updated_at=1703151495750), slug='f2916c33-8835-49dd-b4b0-e70d7ac7f6cd')\n# tswap_order_update_all=TswapOrderUpdateAllTswapOrderUpdateAll(address='5sFGxHB4FPNesDLAFY4qLAYRbPdkwULyrgQLHmzBAbS3', pool=TswapOrderUpdateAllTswapOrderUpdateAllPool(address='5sFGxHB4FPNesDLAFY4qLAYRbPdkwULyrgQLHmzBAbS3', created_unix=1703151498000, curve_type=&lt;CurveType.LINEAR: 'LINEAR'&gt;, delta='10', mm_compound_fees=False, mm_fee_bps=None, nfts_for_sale=[], nfts_held=0, owner_address='K5iuD4h1zv46bsw5KNBMDkYKnnZCGoLq151wdJ7uv9d', pool_type=&lt;PoolType.TOKEN: 'TOKEN'&gt;, sol_balance='238981700', starting_price='43106500000', buy_now_price=None, sell_now_price=None, stats_accumulated_mm_profit='0', stats_taker_buy_count=0, stats_taker_sell_count=0, taker_buy_count=0, taker_sell_count=0, updated_at=1703151501294), slug='claynosaurz')\n# tswap_order_update_all=TswapOrderUpdateAllTswapOrderUpdateAll(address='DjP4K4cyt1UHWWc6rMPj59XndrabaGjXmfz1yq4KyofD', pool=TswapOrderUpdateAllTswapOrderUpdateAllPool(address='DjP4K4cyt1UHWWc6rMPj59XndrabaGjXmfz1yq4KyofD', created_unix=1703151488000, curve_type=&lt;CurveType.LINEAR: 'LINEAR'&gt;, delta='10', mm_compound_fees=False, mm_fee_bps=None, nfts_for_sale=[], nfts_held=0, owner_address='K5iuD4h1zv46bsw5KNBMDkYKnnZCGoLq151wdJ7uv9d', pool_type=&lt;PoolType.TOKEN: 'TOKEN'&gt;, sol_balance='238981700', starting_price='924100000', buy_now_price=None, sell_now_price=None, stats_accumulated_mm_profit='0', stats_taker_buy_count=0, stats_taker_sell_count=0, taker_buy_count=0, taker_sell_count=0, updated_at=1703151492272), slug='88f69a79-98ca-4320-a999-04170880f996')\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#tensortradesdk.solana.SolanaClient","title":"<code>tensortradesdk.solana.SolanaClient</code>","text":"<p>Client for interacting with Solana blockchain.</p>"},{"location":"reference/#tensortradesdk.solana.SolanaClient.__init__","title":"<code>__init__(network, private_key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>network</code> <code>Network</code> <p>Network type to connect to. One of 'devnet' or 'mainnet'.</p> required <code>private_key</code> <code>str</code> <p>Private key to use when when submitting transactions.</p> required"},{"location":"reference/#clients-for-interacting-with-tensortrade-graphql","title":"Clients for interacting with Tensor.trade GraphQL","text":"<p>All clients extend <code>tensortradesdk.clients.base_client.BaseClient</code> and require Tensor.trade GraphQL api key to be  passed in.</p> <p>Example: <pre><code>import os\n\nfrom tensortradesdk.clients.collection_data_client import CollectionDataClient\n\n\napi_key = os.environ[\"TENSOR_API_KEY\"] \nclient = CollectionDataClient(api_key)\n\nclient.collection_mints(\"collection_slug\")\n</code></pre></p>"},{"location":"reference/#tensortradesdk.clients.base_client.BaseClient","title":"<code>tensortradesdk.clients.base_client.BaseClient</code>","text":""},{"location":"reference/#tensortradesdk.clients.base_client.BaseClient.__init__","title":"<code>__init__(api_key, url=None, headers=None, http_client=None)</code>","text":"<p>Base client class for connecting to Tensor.trade GraphQL API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>GraphQL API key to use for authentication.</p> required <code>url</code> <code>str | None</code> <p>Optional GraphQL API URL. Defaults to https://api.tensor.so/graphql.</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, str]]</code> <p>Optional additional headers to be used in all requests.</p> <code>None</code> <code>http_client</code> <code>Optional[Client]</code> <p>Optional alternative http_client class.</p> <code>None</code>"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient","title":"<code>tensortradesdk.clients.collection_data_client.CollectionDataClient</code>","text":""},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.collection_mints","title":"<code>collection_mints(slug, sort_by, filters=UNSET, cursor=UNSET, limit=UNSET, **kwargs)</code>","text":"<p>Get up to 10K mints for a collection and their Tensor rarities.</p> <p>Parameters:</p> Name Type Description Default <code>slug</code> <code>str</code> required <code>sort_by</code> <code>CollectionMintsSortBy</code> required <code>filters</code> <code>Union[Optional[CollectionMintsFilters], UnsetType]</code> <code>UNSET</code> <code>cursor</code> <code>Union[Optional[str], UnsetType]</code> <code>UNSET</code> <code>limit</code> <code>Union[Optional[int], UnsetType]</code> <code>UNSET</code>"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.mint","title":"<code>mint(mint, sort_by=UNSET, limit=UNSET, **kwargs)</code>","text":"<p>Fetches a mint\u2019s slug as well as:</p> <ul> <li>TensorSwap/HadeSwap orders tswapOrders /hswapOrders(both bids and/or the pool    that is sell it)<ul> <li>The pool with a non-empty nftsForSale array is the pool you can buy the NFT from</li> <li>All other pools are pools that you can SELL NOW (for the sellNowPrice)</li> </ul> </li> <li>Tensor single bids tensorBids : any active bids specifically for this NFT</li> <li>its active listing activeListings (if it\u2019s listed on a traditional marketplace)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mint</code> <code>str</code> required <code>sort_by</code> <code>Union[Optional[OrderSortBy], UnsetType]</code> <code>UNSET</code> <code>limit</code> <code>Union[Optional[int], UnsetType]</code> <code>UNSET</code>"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.mint_list","title":"<code>mint_list(slug, limit=UNSET, after=UNSET, **kwargs)</code>","text":"<p>Get the list of mints for a given collection (slug).</p> <p>Parameters:</p> Name Type Description Default <code>slug</code> <code>str</code> required <code>limit</code> <code>Union[Optional[int], UnsetType]</code> <code>UNSET</code> <code>after</code> <code>Union[Optional[str], UnsetType]</code> <code>UNSET</code>"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.mints","title":"<code>mints(token_mints, **kwargs)</code>","text":"<p>Get the collection slug for several mint addresses.</p> <p>Parameters:</p> Name Type Description Default <code>token_mints</code> <code>List[str]</code> required"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.refetch_mint_metadata","title":"<code>refetch_mint_metadata(mint, **kwargs)</code>","text":"<p>Refetches the NFT\u2019s metadata (eg traits, image).</p> Note <p>To reduce the amount of spam, there is 1 hour cooldown for rarities. See Refresh Rarities for triggering a full rarities refresh.</p> <p>Parameters:</p> Name Type Description Default <code>mint</code> <code>str</code> required"},{"location":"reference/#tensortradesdk.clients.collection_data_client.CollectionDataClient.refresh_rarities","title":"<code>refresh_rarities(slug, **kwargs)</code>","text":"<p>Refreshes a collection\u2019s rarity scores on Tensor.</p> Note <p>To reduce the amount of spam, there is 1 hour cooldown for rarities.</p> <p>Parameters:</p> Name Type Description Default <code>slug</code> <code>str</code> required"}]}